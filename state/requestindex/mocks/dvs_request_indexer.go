// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	log "github.com/0xPellNetwork/pelldvs-libs/log"
	mock "github.com/stretchr/testify/mock"

	query "github.com/0xPellNetwork/pelldvs/libs/query"

	requestindex "github.com/0xPellNetwork/pelldvs/state/requestindex"

	types "github.com/0xPellNetwork/pelldvs/avsi/types"
)

// DvsRequestIndexer is an autogenerated mock type for the DvsRequestIndexer type
type DvsRequestIndexer struct {
	mock.Mock
}

// AddBatch provides a mock function with given fields: b
func (_m *DvsRequestIndexer) AddBatch(b *requestindex.Batch) error {
	ret := _m.Called(b)

	if len(ret) == 0 {
		panic("no return value specified for AddBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*requestindex.Batch) error); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: hash
func (_m *DvsRequestIndexer) Get(hash []byte) (*types.DVSRequestResult, error) {
	ret := _m.Called(hash)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *types.DVSRequestResult
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (*types.DVSRequestResult, error)); ok {
		return rf(hash)
	}
	if rf, ok := ret.Get(0).(func([]byte) *types.DVSRequestResult); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.DVSRequestResult)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Index provides a mock function with given fields: result
func (_m *DvsRequestIndexer) Index(result *types.DVSRequestResult) error {
	ret := _m.Called(result)

	if len(ret) == 0 {
		panic("no return value specified for Index")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.DVSRequestResult) error); ok {
		r0 = rf(result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Search provides a mock function with given fields: ctx, q
func (_m *DvsRequestIndexer) Search(ctx context.Context, q *query.Query) ([]*types.DVSRequestResult, error) {
	ret := _m.Called(ctx, q)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 []*types.DVSRequestResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *query.Query) ([]*types.DVSRequestResult, error)); ok {
		return rf(ctx, q)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *query.Query) []*types.DVSRequestResult); ok {
		r0 = rf(ctx, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.DVSRequestResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *query.Query) error); ok {
		r1 = rf(ctx, q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetLogger provides a mock function with given fields: l
func (_m *DvsRequestIndexer) SetLogger(l log.Logger) {
	_m.Called(l)
}

// NewDvsRequestIndexer creates a new instance of DvsRequestIndexer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDvsRequestIndexer(t interface {
	mock.TestingT
	Cleanup(func())
}) *DvsRequestIndexer {
	mock := &DvsRequestIndexer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
