// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pelldvs/rpc/grpc/types.proto

package coregrpc

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RequestPing struct {
}

func (m *RequestPing) Reset()         { *m = RequestPing{} }
func (m *RequestPing) String() string { return proto.CompactTextString(m) }
func (*RequestPing) ProtoMessage()    {}
func (*RequestPing) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b0b36c64efed661, []int{0}
}
func (m *RequestPing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestPing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestPing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestPing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestPing.Merge(m, src)
}
func (m *RequestPing) XXX_Size() int {
	return m.Size()
}
func (m *RequestPing) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestPing.DiscardUnknown(m)
}

var xxx_messageInfo_RequestPing proto.InternalMessageInfo

type DVSRequest struct {
}

func (m *DVSRequest) Reset()         { *m = DVSRequest{} }
func (m *DVSRequest) String() string { return proto.CompactTextString(m) }
func (*DVSRequest) ProtoMessage()    {}
func (*DVSRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b0b36c64efed661, []int{1}
}
func (m *DVSRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DVSRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DVSRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DVSRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DVSRequest.Merge(m, src)
}
func (m *DVSRequest) XXX_Size() int {
	return m.Size()
}
func (m *DVSRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DVSRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DVSRequest proto.InternalMessageInfo

// ----------------------------------------
// Response types
type ResponsePing struct {
}

func (m *ResponsePing) Reset()         { *m = ResponsePing{} }
func (m *ResponsePing) String() string { return proto.CompactTextString(m) }
func (*ResponsePing) ProtoMessage()    {}
func (*ResponsePing) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b0b36c64efed661, []int{2}
}
func (m *ResponsePing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponsePing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponsePing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponsePing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponsePing.Merge(m, src)
}
func (m *ResponsePing) XXX_Size() int {
	return m.Size()
}
func (m *ResponsePing) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponsePing.DiscardUnknown(m)
}

var xxx_messageInfo_ResponsePing proto.InternalMessageInfo

// SendDVSTask
type ResponseDVSRequest struct {
}

func (m *ResponseDVSRequest) Reset()         { *m = ResponseDVSRequest{} }
func (m *ResponseDVSRequest) String() string { return proto.CompactTextString(m) }
func (*ResponseDVSRequest) ProtoMessage()    {}
func (*ResponseDVSRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b0b36c64efed661, []int{3}
}
func (m *ResponseDVSRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseDVSRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseDVSRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseDVSRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseDVSRequest.Merge(m, src)
}
func (m *ResponseDVSRequest) XXX_Size() int {
	return m.Size()
}
func (m *ResponseDVSRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseDVSRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseDVSRequest proto.InternalMessageInfo

type ResultDvsRequestCommit struct {
}

func (m *ResultDvsRequestCommit) Reset()         { *m = ResultDvsRequestCommit{} }
func (m *ResultDvsRequestCommit) String() string { return proto.CompactTextString(m) }
func (*ResultDvsRequestCommit) ProtoMessage()    {}
func (*ResultDvsRequestCommit) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b0b36c64efed661, []int{4}
}
func (m *ResultDvsRequestCommit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResultDvsRequestCommit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResultDvsRequestCommit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResultDvsRequestCommit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultDvsRequestCommit.Merge(m, src)
}
func (m *ResultDvsRequestCommit) XXX_Size() int {
	return m.Size()
}
func (m *ResultDvsRequestCommit) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultDvsRequestCommit.DiscardUnknown(m)
}

var xxx_messageInfo_ResultDvsRequestCommit proto.InternalMessageInfo

type ResultRequestDvsAsync struct {
}

func (m *ResultRequestDvsAsync) Reset()         { *m = ResultRequestDvsAsync{} }
func (m *ResultRequestDvsAsync) String() string { return proto.CompactTextString(m) }
func (*ResultRequestDvsAsync) ProtoMessage()    {}
func (*ResultRequestDvsAsync) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b0b36c64efed661, []int{5}
}
func (m *ResultRequestDvsAsync) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResultRequestDvsAsync) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResultRequestDvsAsync.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResultRequestDvsAsync) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultRequestDvsAsync.Merge(m, src)
}
func (m *ResultRequestDvsAsync) XXX_Size() int {
	return m.Size()
}
func (m *ResultRequestDvsAsync) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultRequestDvsAsync.DiscardUnknown(m)
}

var xxx_messageInfo_ResultRequestDvsAsync proto.InternalMessageInfo

type QueryDvsRequestParam struct {
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *QueryDvsRequestParam) Reset()         { *m = QueryDvsRequestParam{} }
func (m *QueryDvsRequestParam) String() string { return proto.CompactTextString(m) }
func (*QueryDvsRequestParam) ProtoMessage()    {}
func (*QueryDvsRequestParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b0b36c64efed661, []int{6}
}
func (m *QueryDvsRequestParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDvsRequestParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDvsRequestParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDvsRequestParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDvsRequestParam.Merge(m, src)
}
func (m *QueryDvsRequestParam) XXX_Size() int {
	return m.Size()
}
func (m *QueryDvsRequestParam) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDvsRequestParam.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDvsRequestParam proto.InternalMessageInfo

func (m *QueryDvsRequestParam) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func init() {
	proto.RegisterType((*RequestPing)(nil), "pelldvs.rpc.grpc.RequestPing")
	proto.RegisterType((*DVSRequest)(nil), "pelldvs.rpc.grpc.DVSRequest")
	proto.RegisterType((*ResponsePing)(nil), "pelldvs.rpc.grpc.ResponsePing")
	proto.RegisterType((*ResponseDVSRequest)(nil), "pelldvs.rpc.grpc.ResponseDVSRequest")
	proto.RegisterType((*ResultDvsRequestCommit)(nil), "pelldvs.rpc.grpc.ResultDvsRequestCommit")
	proto.RegisterType((*ResultRequestDvsAsync)(nil), "pelldvs.rpc.grpc.ResultRequestDvsAsync")
	proto.RegisterType((*QueryDvsRequestParam)(nil), "pelldvs.rpc.grpc.QueryDvsRequestParam")
}

func init() { proto.RegisterFile("pelldvs/rpc/grpc/types.proto", fileDescriptor_8b0b36c64efed661) }

var fileDescriptor_8b0b36c64efed661 = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x29, 0x48, 0xcd, 0xc9,
	0x49, 0x29, 0x2b, 0xd6, 0x2f, 0x2a, 0x48, 0xd6, 0x4f, 0x07, 0x11, 0x25, 0x95, 0x05, 0xa9, 0xc5,
	0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x02, 0x50, 0x59, 0xbd, 0xa2, 0x82, 0x64, 0x3d, 0x90,
	0xac, 0x12, 0x2f, 0x17, 0x77, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71, 0x49, 0x40, 0x66, 0x5e, 0xba,
	0x12, 0x0f, 0x17, 0x97, 0x4b, 0x58, 0x30, 0x54, 0x44, 0x89, 0x8f, 0x8b, 0x27, 0x28, 0xb5, 0xb8,
	0x20, 0x3f, 0xaf, 0x38, 0x15, 0x2c, 0x2b, 0xc2, 0x25, 0x04, 0xe3, 0x23, 0xa9, 0x92, 0xe0, 0x12,
	0x0b, 0x4a, 0x2d, 0x2e, 0xcd, 0x29, 0x71, 0x29, 0x2b, 0x86, 0x8a, 0x39, 0xe7, 0xe7, 0xe6, 0x66,
	0x96, 0x28, 0x89, 0x73, 0x89, 0x42, 0x64, 0xa0, 0xc2, 0x2e, 0x65, 0xc5, 0x8e, 0xc5, 0x95, 0x79,
	0xc9, 0x4a, 0x5a, 0x5c, 0x22, 0x81, 0xa5, 0xa9, 0x45, 0x95, 0x08, 0x1d, 0x01, 0x89, 0x45, 0x89,
	0xb9, 0x42, 0x42, 0x5c, 0x2c, 0x19, 0x89, 0xc5, 0x19, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x3c, 0x41,
	0x60, 0xb6, 0xd1, 0x7b, 0x26, 0x2e, 0x5e, 0x84, 0x6d, 0x8e, 0x01, 0x9e, 0x42, 0xae, 0x5c, 0x2c,
	0x20, 0xe7, 0x08, 0xc9, 0xea, 0xa1, 0x7b, 0x47, 0x0f, 0xc9, 0x2f, 0x52, 0x72, 0xd8, 0xa4, 0x11,
	0xbe, 0x11, 0x8a, 0xe0, 0xe2, 0x43, 0xb8, 0x2b, 0xb8, 0x32, 0x2f, 0x59, 0x48, 0x06, 0x53, 0x07,
	0xc2, 0x66, 0x29, 0x0d, 0xac, 0xe6, 0x61, 0xf1, 0xb7, 0x50, 0x04, 0x17, 0x3f, 0x9a, 0x8f, 0x09,
	0x18, 0xad, 0x8e, 0xcb, 0x68, 0x74, 0x63, 0x92, 0xb9, 0xf8, 0xd1, 0x02, 0x4e, 0x48, 0x0d, 0x53,
	0x2f, 0xb6, 0xb0, 0x25, 0xde, 0xf9, 0x4e, 0x3e, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7,
	0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c,
	0xc7, 0x10, 0x65, 0x94, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x6f, 0x50,
	0x11, 0x90, 0x9a, 0x93, 0xe3, 0x97, 0x5a, 0x52, 0x9e, 0x5f, 0x94, 0xad, 0x8f, 0x9e, 0xec, 0xac,
	0x93, 0xf3, 0x8b, 0x52, 0x41, 0x8c, 0x24, 0x36, 0x70, 0xd2, 0x33, 0x06, 0x04, 0x00, 0x00, 0xff,
	0xff, 0xb9, 0x9d, 0x42, 0xdf, 0x9a, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DVSRequestAPIClient is the client API for DVSRequestAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DVSRequestAPIClient interface {
	Ping(ctx context.Context, in *RequestPing, opts ...grpc.CallOption) (*ResponsePing, error)
	RequestDvsSync(ctx context.Context, in *DVSRequest, opts ...grpc.CallOption) (*ResultDvsRequestCommit, error)
	RequestDvsAsync(ctx context.Context, in *DVSRequest, opts ...grpc.CallOption) (*ResultRequestDvsAsync, error)
	QueryDvsRequest(ctx context.Context, in *QueryDvsRequestParam, opts ...grpc.CallOption) (*ResultDvsRequestCommit, error)
}

type dVSRequestAPIClient struct {
	cc grpc1.ClientConn
}

func NewDVSRequestAPIClient(cc grpc1.ClientConn) DVSRequestAPIClient {
	return &dVSRequestAPIClient{cc}
}

func (c *dVSRequestAPIClient) Ping(ctx context.Context, in *RequestPing, opts ...grpc.CallOption) (*ResponsePing, error) {
	out := new(ResponsePing)
	err := c.cc.Invoke(ctx, "/pelldvs.rpc.grpc.DVSRequestAPI/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dVSRequestAPIClient) RequestDvsSync(ctx context.Context, in *DVSRequest, opts ...grpc.CallOption) (*ResultDvsRequestCommit, error) {
	out := new(ResultDvsRequestCommit)
	err := c.cc.Invoke(ctx, "/pelldvs.rpc.grpc.DVSRequestAPI/RequestDvsSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dVSRequestAPIClient) RequestDvsAsync(ctx context.Context, in *DVSRequest, opts ...grpc.CallOption) (*ResultRequestDvsAsync, error) {
	out := new(ResultRequestDvsAsync)
	err := c.cc.Invoke(ctx, "/pelldvs.rpc.grpc.DVSRequestAPI/RequestDvsAsync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dVSRequestAPIClient) QueryDvsRequest(ctx context.Context, in *QueryDvsRequestParam, opts ...grpc.CallOption) (*ResultDvsRequestCommit, error) {
	out := new(ResultDvsRequestCommit)
	err := c.cc.Invoke(ctx, "/pelldvs.rpc.grpc.DVSRequestAPI/QueryDvsRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DVSRequestAPIServer is the server API for DVSRequestAPI service.
type DVSRequestAPIServer interface {
	Ping(context.Context, *RequestPing) (*ResponsePing, error)
	RequestDvsSync(context.Context, *DVSRequest) (*ResultDvsRequestCommit, error)
	RequestDvsAsync(context.Context, *DVSRequest) (*ResultRequestDvsAsync, error)
	QueryDvsRequest(context.Context, *QueryDvsRequestParam) (*ResultDvsRequestCommit, error)
}

// UnimplementedDVSRequestAPIServer can be embedded to have forward compatible implementations.
type UnimplementedDVSRequestAPIServer struct {
}

func (*UnimplementedDVSRequestAPIServer) Ping(ctx context.Context, req *RequestPing) (*ResponsePing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedDVSRequestAPIServer) RequestDvsSync(ctx context.Context, req *DVSRequest) (*ResultDvsRequestCommit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestDvsSync not implemented")
}
func (*UnimplementedDVSRequestAPIServer) RequestDvsAsync(ctx context.Context, req *DVSRequest) (*ResultRequestDvsAsync, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestDvsAsync not implemented")
}
func (*UnimplementedDVSRequestAPIServer) QueryDvsRequest(ctx context.Context, req *QueryDvsRequestParam) (*ResultDvsRequestCommit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDvsRequest not implemented")
}

func RegisterDVSRequestAPIServer(s grpc1.Server, srv DVSRequestAPIServer) {
	s.RegisterService(&_DVSRequestAPI_serviceDesc, srv)
}

func _DVSRequestAPI_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DVSRequestAPIServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pelldvs.rpc.grpc.DVSRequestAPI/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DVSRequestAPIServer).Ping(ctx, req.(*RequestPing))
	}
	return interceptor(ctx, in, info, handler)
}

func _DVSRequestAPI_RequestDvsSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DVSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DVSRequestAPIServer).RequestDvsSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pelldvs.rpc.grpc.DVSRequestAPI/RequestDvsSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DVSRequestAPIServer).RequestDvsSync(ctx, req.(*DVSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DVSRequestAPI_RequestDvsAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DVSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DVSRequestAPIServer).RequestDvsAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pelldvs.rpc.grpc.DVSRequestAPI/RequestDvsAsync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DVSRequestAPIServer).RequestDvsAsync(ctx, req.(*DVSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DVSRequestAPI_QueryDvsRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDvsRequestParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DVSRequestAPIServer).QueryDvsRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pelldvs.rpc.grpc.DVSRequestAPI/QueryDvsRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DVSRequestAPIServer).QueryDvsRequest(ctx, req.(*QueryDvsRequestParam))
	}
	return interceptor(ctx, in, info, handler)
}

var DVSRequestAPI_serviceDesc = _DVSRequestAPI_serviceDesc
var _DVSRequestAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pelldvs.rpc.grpc.DVSRequestAPI",
	HandlerType: (*DVSRequestAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _DVSRequestAPI_Ping_Handler,
		},
		{
			MethodName: "RequestDvsSync",
			Handler:    _DVSRequestAPI_RequestDvsSync_Handler,
		},
		{
			MethodName: "RequestDvsAsync",
			Handler:    _DVSRequestAPI_RequestDvsAsync_Handler,
		},
		{
			MethodName: "QueryDvsRequest",
			Handler:    _DVSRequestAPI_QueryDvsRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pelldvs/rpc/grpc/types.proto",
}

func (m *RequestPing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestPing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestPing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DVSRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DVSRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DVSRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ResponsePing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponsePing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponsePing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ResponseDVSRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseDVSRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseDVSRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ResultDvsRequestCommit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultDvsRequestCommit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResultDvsRequestCommit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ResultRequestDvsAsync) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultRequestDvsAsync) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResultRequestDvsAsync) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryDvsRequestParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDvsRequestParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDvsRequestParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RequestPing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DVSRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ResponsePing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ResponseDVSRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ResultDvsRequestCommit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ResultRequestDvsAsync) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryDvsRequestParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RequestPing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestPing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestPing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DVSRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DVSRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DVSRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponsePing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponsePing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponsePing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseDVSRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseDVSRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseDVSRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultDvsRequestCommit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultDvsRequestCommit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultDvsRequestCommit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultRequestDvsAsync) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultRequestDvsAsync: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultRequestDvsAsync: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDvsRequestParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDvsRequestParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDvsRequestParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
